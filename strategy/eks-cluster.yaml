Description: >
  Patryk Futa
  Capstone Udacity Project
  EKS cluster

Parameters:
  ProjectName:
    Description: Web server application dedicated on K8n cluser.
    Type: String
  EnvironmentName:
    Description: An environment name of the Website.
    Type: String
  VPCRange:
    Description: VPC CIRD range of infrastructure.
    Type: String
    Default: 10.0.0.0/16
  SubnetPrivateUSWEST2C:
    Description: IP range of 10.0.0.0 - 10.0.0.255 for Private Subnet 1
    Type: String
    Default: 10.0.0.0/24
  SubnetPrivateUSWEST2B:
    Description: IP range of 10.0.1.0 - 10.0.1.255 for Private Subnet 2
    Type: String
    Default: 10.0.1.0/24
  SubnetPrivateUSWEST2A:
    Description: IP range of 10.0.2.0 - 10.0.2.255 for Private Subnet 3
    Type: String
    Default: 10.0.2.0/24
  SubnetPublicUSWEST2C:
    Description: IP range of 10.0.3.0 - 10.0.3.255 for Public Subnet 1
    Type: String
    Default: 10.0.3.0/24
  SubnetPublicUSWEST2B:
    Description: IP range of 10.0.4.0 - 10.0.4.255 for String Subnet 2
    Type: String
    Default: 10.0.4.0/24
  SubnetPublicUSWEST2A:
    Description: IP range of 10.0.5.0 - 10.0.5.255 for String Subnet 3
    Type: String
    Default: 10.0.5.0/24

Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VPC
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: web-cluster
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPublicUSWEST2C
          - !Ref SubnetPublicUSWEST2B
          - !Ref SubnetPublicUSWEST2A
          - !Ref SubnetPrivateUSWEST2C
          - !Ref SubnetPrivateUSWEST2B
          - !Ref SubnetPrivateUSWEST2A
      RoleArn: !GetAtt 
        - ServiceRole
        - Arn
      Version: '1.17'
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC
  IngressDefaultClusterToNodeSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt 
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt 
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATIP
        - AllocationId
      SubnetId: !Ref SubnetPublicUSWEST2A
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/NATIP'
  NATPrivateSubnetRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable1
  NATPrivateSubnetRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable2
  NATPrivateSubnetRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable3
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${ProjectName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyELBPermissions:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeAccountAttributes'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${ProjectName}-PolicyELBPermissions'
      Roles:
        - !Ref ServiceRole
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/PrivateRouteTable1'
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/PrivateRouteTable2'
      VpcId: !Ref VPC
  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/PrivateRouteTable3'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref SubnetPrivateUSWEST2A
  RouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref SubnetPrivateUSWEST2B
  RouteTableAssociationPrivate3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref SubnetPrivateUSWEST2C
  RouteTableAssociationPublic1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2A
  RouteTableAssociationPublic2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2B
  RouteTableAssociationPublic3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2C
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKS
                - !FindInMap 
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKSFargatePods
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/ServiceRole'
  SubnetPrivateUSWEST2A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref SubnetPrivateUSWEST2A
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPrivateUSWEST2A'
      VpcId: !Ref VPC
  SubnetPrivateUSWEST2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref SubnetPrivateUSWEST2B
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPrivateUSWEST2B'
      VpcId: !Ref VPC
  SubnetPrivateUSWEST2C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref SubnetPrivateUSWEST2C
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPrivateUSWEST2C'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref SubnetPublicUSWEST2A
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPublicUSWEST2A'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref SubnetPublicUSWEST2B
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPublicUSWEST2B'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref SubnetPublicUSWEST2C
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${ProjectName}/SubnetPublicUSWEST2C'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCRange
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  ARN:
    Export:
      Name: !Sub '${ProjectName}::ARN'
    Value: !GetAtt 
      - ControlPlane
      - Arn
  CertificateAuthorityData:
    Value: !GetAtt 
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Export:
      Name: !Sub '${ProjectName}::ClusterSecurityGroupId'
    Value: !GetAtt 
      - ControlPlane
      - ClusterSecurityGroupId
  ClusterStackName:
    Value: !Ref 'ProjectName'
  Endpoint:
    Export:
      Name: !Sub '${ProjectName}::Endpoint'
    Value: !GetAtt 
      - ControlPlane
      - Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name: !Sub '${ProjectName}::SecurityGroup'
    Value: !Ref ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name: !Sub '${ProjectName}::ServiceRoleARN'
    Value: !GetAtt 
      - ServiceRole
      - Arn
  SharedNodeSecurityGroup:
    Export:
      Name: !Sub '${ProjectName}::SharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup
  SubnetsPrivate:
    Export:
      Name: !Sub '${ProjectName}::SubnetsPrivate'
    Value: !Join 
      - ','
      - - !Ref SubnetPrivateUSWEST2C
        - !Ref SubnetPrivateUSWEST2B
        - !Ref SubnetPrivateUSWEST2A
  SubnetsPublic:
    Export:
      Name: !Sub '${ProjectName}::SubnetsPublic'
    Value: !Join 
      - ','
      - - !Ref SubnetPublicUSWEST2C
        - !Ref SubnetPublicUSWEST2B
        - !Ref SubnetPublicUSWEST2A
  VPC:
    Export:
      Name: !Sub '${ProjectName}::VPC'
    Value: !Ref VPC
  ControlPlane:
    Export:
      Name: !Sub '${ProjectName}::ControlPlane'
    Value: !Ref ControlPlane
  ClusterSharedNodeSecurityGroup:
    Export:
      Name: !Sub '${ProjectName}/ClusterSharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup